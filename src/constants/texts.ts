import React from "react";
import { Validator, validators } from "../lib/validators";
import { MultiInputOption, MultiInputType } from "../components/formMultiInput";
import { SelectOption, SelectOptionGroup } from "../components/formSelect";

interface FieldProps {
  id: string;
  typeComponent: "input" | "textarea" | "multiInput" | "select";
  typeField?: React.HTMLInputTypeAttribute;
  label: string;
  fieldPlaceholder?: string;
  required?: boolean;
  buttonText?: (isLoading: boolean) => string;
  errorMessage: string;
  validators?: Validator[];
  minLength?: number;
  maxLength?: number;
  pattern?: RegExp;

  multiInputType?: MultiInputType;
  multiInputOptions?: MultiInputOption<string | number | boolean>[];
  multiInputLayout?: "vertical" | "horizontal" | "grid";
  multiInputGridColumns?: number;

  selectOptions?: SelectOption[];
  selectOptionGroups?: SelectOptionGroup[];
  selectPlaceholder?: string;
  selectEmptyMessage?: string;
}

const FormTexts = {
  title: "CG Asesores",
  subTitle: (service: string) =>
    service ? `Generar ${service}` : "Generar Documento Legal",
  common: {
    userName: {
      id: "userName",
      typeComponent: "input",
      typeField: "text",
      label: "Nombre Completo",
      required: true,
      fieldPlaceholder: "Ej. Juan Carlos Pérez García",
      errorMessage: "Por favor ingresa el nombre completo.",
      validators: [],
      minLength: 2,
      maxLength: 100,
    } as FieldProps,
    typeId: {
      id: "typeId",
      typeComponent: "select",
      label: "Tipo de Documento de Identidad",
      required: true,
      errorMessage: "Por favor selecciona el tipo de documento.",
      validators: [],
      selectPlaceholder: "Selecciona tipo de documento",
      selectOptions: [
        { value: "CC", label: "Cédula de Ciudadanía" },
        { value: "TI", label: "Tarjeta de Identidad" },
        { value: "CE", label: "Cédula de Extranjería" },
        { value: "PASAPORTE", label: "Pasaporte" },
        { value: "PEP", label: "PEP" },
      ],
    } as FieldProps,
    idNumber: {
      id: "idNumber",
      typeComponent: "input",
      typeField: "text",
      label: "Número de Documento de Identidad",
      required: true,
      fieldPlaceholder: "Ej. 12345678",
      errorMessage: "Por favor ingresa un número de documento válido.",
      validators: [],
      minLength: 5,
      maxLength: 20,
      pattern: /^[A-Z0-9]+$/i,
    } as FieldProps,
    documentCity: {
      id: "documentCity",
      typeComponent: "input",
      typeField: "text",
      label: "Ciudad donde se diligencia el documento",
      required: true,
      fieldPlaceholder: "Ej. Bogotá",
      errorMessage:
        "Por favor ingresa la ciudad donde se diligencia el documento.",
      validators: [],
      minLength: 2,
      maxLength: 50,
    } as FieldProps,
    documentDate: {
      id: "documentDate",
      typeComponent: "input",
      typeField: "date",
      label: "Fecha donde se diligencia el documento",
      required: true,
      errorMessage:
        "Por favor ingresa la fecha donde se diligencia el documento.",
      validators: [],
    } as FieldProps,
  },
  formDescription: {
    bypassTitle: "Bienvenida Catalina",
    bypassMessage: "Selecciona el tipo de formulario que deseas generar.",
    orderNumber: "Nº Pedido:",
    orderDate: "Fecha de pedido:",
    orderStatus: "Estado del pedido:",
    unloadedDataMsg: `Para obtener tu documento debes tener el <strong>Número de pedido</strong> y el <strong>Código de confirmación</strong> generados al adquirir el servicio. Para más información revisa nuestras guías.`,
    unpaidOrderMsg:
      "Este pedido aún no ha sido pagado. Para procesar tu documento, el pedido debe estar en estado 'Pagado'.",
    unpaidOrderSuggestion:
      "Por favor verifica que el pago haya sido procesado correctamente. Si consideras que hay un error, contáctanos a través de",
    processedDate: (date: string) =>
      `<strong>Fecha de procesamiento:</strong> ${new Date(
        date
      ).toLocaleDateString("es-CO", {
        year: "numeric",
        month: "long",
        day: "numeric",
      })}`,
    emailAddress: (email: string) => `<strong>Enviado a:</strong> ${email}`,
    disagreementSuggestion:
      "Si consideras que hay un error, por favor contáctanos a través de los medios en",
  },
  orderNumber: {
    id: "orderNumber",
    typeComponent: "input",
    typeField: "text",
    label: "Número de pedido",
    fieldPlaceholder: "Ej. 1001",
    required: true,
    buttonText: (isLoading: boolean) =>
      isLoading ? "Consultando..." : "Consultar",
    errorMessage: "Por favor ingresa un número de pedido válido.",
    validators: [],
    pattern: /^\d+$/,
  } as FieldProps,
  confirmationCode: {
    id: "confirmationCode",
    typeComponent: "input",
    typeField: "text",
    label: "Código de confirmación",
    fieldPlaceholder: "Ej. CGCDHMGF9",
    required: true,
    errorMessage: "Por favor ingresa un código de confirmación válido.",
    validators: [],
    minLength: 6,
    maxLength: 20,
    pattern: /^[A-Z0-9]+$/i,
  } as FieldProps,
  tutela: {
    email: {
      id: "email",
      typeComponent: "input",
      typeField: "email",
      label: "Correo Electrónico",
      required: true,
      fieldPlaceholder: "Ej. correo@example.com",
      errorMessage: "Por favor ingresa un correo electrónico válido.",
      validators: [],
    } as FieldProps,
    address: {
      id: "address",
      typeComponent: "input",
      typeField: "text",
      label: "Dirección de residencia de quien diligencia",
      required: true,
      fieldPlaceholder: "Ej. Calle 123",
      errorMessage: "Por favor ingresa una dirección válida.",
      validators: [],
      minLength: 5,
      maxLength: 200,
    } as FieldProps,
    city: {
      id: "city",
      typeComponent: "input",
      typeField: "text",
      label: "Ciudad de residencia de quien diligencia",
      required: true,
      fieldPlaceholder: "Ej. Bogotá",
      errorMessage:
        "Por favor ingresa la ciudad de residencia de quien diligencia.",
      validators: [],
      minLength: 2,
      maxLength: 50,
    } as FieldProps,
    state: {
      id: "state",
      typeComponent: "input",
      typeField: "text",
      label: "Departamento de residencia de quien diligencia",
      required: true,
      fieldPlaceholder: "Ej. Cundinamarca",
      errorMessage:
        "Por favor ingresa el departamento de residencia de quien diligencia.",
      validators: [],
      minLength: 3,
      maxLength: 50,
    } as FieldProps,
    phone: {
      id: "phone",
      typeComponent: "input",
      typeField: "tel",
      label: "Teléfono de quien diligencia",
      required: true,
      fieldPlaceholder: "Ej. 3001234567",
      errorMessage: "Por favor ingresa un teléfono válido.",
      validators: [],
      pattern: /^[+]?[1-9]\d{1,14}$/,
    } as FieldProps,
    guiltyParty: {
      id: "guiltyParty",
      typeComponent: "input",
      typeField: "text",
      label: "Entidad a quien se dirige la tutela",
      fieldPlaceholder: "Ej. Alcaldía Municipal de Bogotá",
      required: true,
      errorMessage: "Por favor ingresa una entidad válida.",
      validators: [],
      minLength: 3,
      maxLength: 200,
    } as FieldProps,
    facts: {
      id: "facts",
      typeComponent: "textarea",
      label: "Hechos que dan origen a la tutela",
      required: true,
      fieldPlaceholder: "Ej. Descripción de los hechos",
      errorMessage: "Por favor ingresa una descripción válida de los hechos.",
      validators: [],
      minLength: 20,
      maxLength: 2000,
    } as FieldProps,
    expectation: {
      id: "expectation",
      typeComponent: "textarea",
      label: "¿Qué esperas lograr con esta tutela?",
      required: true,
      fieldPlaceholder: "Ej. Protección de derechos",
      errorMessage: "Por favor ingresa una expectativa válida.",
      validators: [],
      minLength: 10,
      maxLength: 1000,
    } as FieldProps,
    protectedRights: {
      id: "protectedRights",
      typeComponent: "textarea",
      label: "Derechos fundamentales protegidos por la tutela",
      required: false,
      fieldPlaceholder:
        "Ej. Derecho a la salud, derecho a la vida, derecho al debido proceso...",
      errorMessage:
        "Por favor describe los derechos fundamentales que se buscan proteger.",
      validators: [],
      minLength: 10,
      maxLength: 1000,
    } as FieldProps,
  },
  peticion: {
    city: {
      id: "city",
      typeComponent: "input",
      typeField: "text",
      label: "Ciudad de presentación",
      required: true,
      fieldPlaceholder: "Ej. Bucaramangahats",
      errorMessage: "Por favor ingresa la ciudad de presentación.",
      validators: [],
      minLength: 2,
      maxLength: 50,
    } as FieldProps,
    date: {
      id: "date",
      typeComponent: "input",
      typeField: "date",
      label: "Fecha de presentación",
      required: true,
      errorMessage: "Por favor ingresa la fecha de presentación.",
      validators: [],
    } as FieldProps,
    targetEntity: {
      id: "targetEntity",
      typeComponent: "input",
      typeField: "text",
      label: "Entidad o persona a quien va dirigida la petición",
      required: true,
      fieldPlaceholder: "Ej. Alcaldía Municipal de Bogotá",
      errorMessage: "Por favor ingresa la entidad o persona destinataria.",
      validators: [],
      minLength: 3,
      maxLength: 200,
    } as FieldProps,
    petitionRequest: {
      id: "petitionRequest",
      typeComponent: "textarea",
      label: "Explicación clara de lo que pide, solicita o necesita",
      required: true,
      fieldPlaceholder: "Ej. Solicito información sobre...",
      errorMessage: "Por favor explica claramente lo que solicitas.",
      validators: [],
      minLength: 20,
      maxLength: 2000,
    } as FieldProps,
    petitionReasons: {
      id: "petitionReasons",
      typeComponent: "textarea",
      label: "Motivos o razones por las cuales realiza la petición",
      required: true,
      fieldPlaceholder: "Ej. Los motivos de mi solicitud son...",
      errorMessage: "Por favor explica los motivos de tu petición.",
      validators: [],
      minLength: 20,
      maxLength: 2000,
    } as FieldProps,
    responseAddress: {
      id: "responseAddress",
      typeComponent: "input",
      typeField: "text",
      label: "Dirección física donde desea recibir la respuesta",
      required: false,
      fieldPlaceholder: "Ej. Calle 123 #45-67",
      errorMessage: "Por favor ingresa una dirección válida.",
      validators: [],
      minLength: 5,
      maxLength: 150,
    } as FieldProps,
    responseCity: {
      id: "responseCity",
      typeComponent: "input",
      typeField: "text",
      label: "Ciudad y Departamento donde desea recibir la respuesta",
      required: false,
      fieldPlaceholder: "Ej. Bogotá, Cundinamarca",
      errorMessage:
        "Por favor ingresa la ciudad y departamento donde desea recibir la respuesta.",
      validators: [],
      minLength: 2,
      maxLength: 50,
    } as FieldProps,
    responseEmail: {
      id: "responseEmail",
      typeComponent: "input",
      typeField: "email",
      label: "Correo electrónico donde desea recibir la respuesta",
      required: true,
      fieldPlaceholder: "Ej. juanperez@example.com",
      errorMessage: "Por favor ingresa un correo electrónico válido.",
      validators: [],
    } as FieldProps,
  },
  transito: {
    // Datos del Solicitante específicos
    notificationAddress: {
      id: "notificationAddress",
      typeComponent: "input",
      typeField: "text",
      label: "Dirección de Notificación",
      required: true,
      fieldPlaceholder: "Ej. Calle 123 #45-67",
      errorMessage: "Por favor ingresa una dirección válida.",
      validators: [],
      minLength: 10,
      maxLength: 200,
    } as FieldProps,
    notificationCity: {
      id: "notificationCity",
      typeComponent: "input",
      typeField: "text",
      label: "Ciudad de Notificación",
      required: true,
      fieldPlaceholder: "Ej. Bogotá",
      errorMessage: "Por favor ingresa la ciudad de notificación.",
      validators: [],
      minLength: 2,
      maxLength: 50,
    } as FieldProps,
    notificationEmail: {
      id: "notificationEmail",
      typeComponent: "input",
      typeField: "email",
      label: "Correo Electrónico para Notificaciones",
      required: true,
      fieldPlaceholder: "Ej. juanperez@email.com",
      errorMessage: "Por favor ingresa un correo electrónico válido.",
      validators: [],
    } as FieldProps,
    phoneNumber: {
      id: "phoneNumber",
      typeComponent: "input",
      typeField: "tel",
      label: "Número de Teléfono",
      required: true,
      fieldPlaceholder: "Ej. 3001234567",
      errorMessage: "Por favor ingresa un número de teléfono válido.",
      validators: [],
      minLength: 7,
      maxLength: 15,
      pattern: /^[0-9+\-\s()]+$/,
    } as FieldProps,

    // Datos del Trámite y el Vehículo
    procedureType: {
      id: "procedureType",
      typeComponent: "select",
      label: "Tipo de Trámite a Realizar",
      required: true,
      errorMessage: "Por favor selecciona el tipo de trámite.",
      validators: [],
      selectPlaceholder: "Selecciona el tipo de trámite",
    } as FieldProps,
    actNumber: {
      id: "actNumber",
      typeComponent: "input",
      typeField: "text",
      label: "Número de Identificación del Acto",
      required: true,
      fieldPlaceholder: "Ej. Comparendo, Resolución o Mandamiento",
      errorMessage: "Por favor ingresa el número del acto.",
      validators: [],
      minLength: 3,
      maxLength: 50,
    } as FieldProps,
    actDate: {
      id: "actDate",
      typeComponent: "input",
      typeField: "date",
      label: "Fecha del Acto",
      required: true,
      errorMessage: "Por favor ingresa la fecha del acto.",
      validators: [],
    } as FieldProps,
    infractionCode: {
      id: "infractionCode",
      typeComponent: "input",
      typeField: "text",
      label: "Código de la Infracción",
      required: false,
      fieldPlaceholder: "Ej. C29",
      errorMessage: "Por favor ingresa un código válido.",
      validators: [],
      maxLength: 10,
    } as FieldProps,
    infractionDescription: {
      id: "infractionDescription",
      typeComponent: "input",
      typeField: "text",
      label: "Descripción de la Infracción",
      required: false,
      fieldPlaceholder: "Ej. Exceso de velocidad",
      errorMessage: "Por favor ingresa una descripción válida.",
      validators: [],
      maxLength: 200,
    } as FieldProps,
    vehicleBrand: {
      id: "vehicleBrand",
      typeComponent: "input",
      typeField: "text",
      label: "Marca del Vehículo",
      required: true,
      fieldPlaceholder: "Ej. Toyota",
      errorMessage: "Por favor ingresa la marca del vehículo.",
      validators: [],
      minLength: 2,
      maxLength: 50,
    } as FieldProps,
    vehicleModel: {
      id: "vehicleModel",
      typeComponent: "input",
      typeField: "text",
      label: "Modelo del Vehículo",
      required: true,
      fieldPlaceholder: "Ej. Corolla",
      errorMessage: "Por favor ingresa el modelo del vehículo.",
      validators: [],
      minLength: 1,
      maxLength: 50,
    } as FieldProps,
    vehiclePlates: {
      id: "vehiclePlates",
      typeComponent: "input",
      typeField: "text",
      label: "Placas del Vehículo",
      required: true,
      fieldPlaceholder: "Ej. ABC123",
      errorMessage: "Por favor ingresa las placas del vehículo.",
      validators: [],
      minLength: 5,
      maxLength: 10,
      pattern: /^[A-Z0-9]+$/i,
    } as FieldProps,
    isOwner: {
      id: "isOwner",
      typeComponent: "select",
      label:
        "¿Es el solicitante el propietario del vehículo al momento del hecho?",
      required: true,
      errorMessage: "Por favor selecciona una opción.",
      validators: [],
      selectPlaceholder: "Selecciona una opción",
      selectOptions: [
        { value: "si", label: "Sí" },
        { value: "no", label: "No" },
      ],
    } as FieldProps,

    // Datos Adicionales/Contextuales
    mobilitySecretaryName: {
      id: "mobilitySecretaryName",
      typeComponent: "input",
      typeField: "text",
      label: "Nombre Completo de la Secretaría de Movilidad",
      required: true,
      fieldPlaceholder: "Ej. Secretaría de Movilidad de Bogotá",
      errorMessage: "Por favor ingresa el nombre de la secretaría.",
      validators: [],
      minLength: 5,
      maxLength: 100,
    } as FieldProps,
    petitionDate: {
      id: "petitionDate",
      typeComponent: "input",
      typeField: "date",
      label: "Fecha de elaboración del Derecho de Petición",
      required: true,
      errorMessage: "Por favor ingresa la fecha de elaboración.",
      validators: [],
    } as FieldProps,
    virtualAudienceReason: {
      id: "virtualAudienceReason",
      typeComponent: "textarea",
      label: "Razón breve para no asistir presencialmente a la audiencia",
      required: true,
      fieldPlaceholder:
        "Explique brevemente por qué no puede asistir presencialmente...",
      errorMessage: "Por favor ingresa una razón válida.",
      validators: [],
      minLength: 10,
      maxLength: 500,
    } as FieldProps,
  },
  footer: {
    currentErrors: (errorCount: number) => `Campos por revisar: ${errorCount}`,
    buttonText: (isLoading: boolean) =>
      isLoading ? "Generando..." : "Generar Documento Legal",

    // Campos para el correo de entrega del documento
    deliveryEmail: {
      id: "deliveryEmail",
      typeComponent: "input",
      typeField: "email",
      label: "Correo electrónico para recibir el documento",
      required: true,
      fieldPlaceholder: "Ej. mi.correo@email.com",
      errorMessage:
        "Por favor ingresa un correo electrónico válido para recibir el documento.",
      validators: [validators.required, validators.email],
    } as FieldProps,

    usePreviousEmail: {
      id: "usePreviousEmail",
      typeComponent: "input",
      typeField: "checkbox",
      label: "Usar correo electrónico anteriormente suministrado",
      required: false,
      errorMessage: "",
      validators: [],
    } as FieldProps,
  },
  isSubmitting: {
    title: "Procesando formulario...",
    message: "Por favor espera mientras procesamos tu solicitud",
  },
};

export default FormTexts;

